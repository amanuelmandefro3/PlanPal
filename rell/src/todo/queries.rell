query get_tasks(
    user_id: byte_array,
    pointer: integer,
    n_tasks: integer,
    sort: text
): (total: integer, pointer: integer,  tasks: list<task_dto>) {
    val user = require_user(user_id);
    val total = task @* { .user == user } ( @ sum 1 )[0];
    if (sort == "ASC") {
        val tasks = task @* { .user == user } (
            @sort @omit .due_date,
            task_dto (
                .rowid,
                .title,
                .description,
                .status,
                .due_date,
                user = task.user.to_struct()
            )
        ) offset pointer limit n_tasks;
        return (
            total = total,
            pointer = pointer + tasks.size(),
            tasks = tasks
        );
    } else {
        val tasks = task @* { .user == user } (
            @sort_desc @omit .due_date,
            task_dto (
                .rowid,
                .title,
                .description,
                .status,
                .due_date,
                user = task.user.to_struct()
            )
        ) offset pointer limit n_tasks;

        return (
            total = total,
            pointer = pointer + tasks.size(),
            tasks = tasks
        );
    }
}

query get_today_tasks(
    user_id: byte_array,
    day_start: timestamp,
    day_end: timestamp,
    pointer: integer,
    n_tasks: integer,
): (total:integer, pointer: integer, tasks: list<task_dto> ) {
    val user = require_user(user_id);
    // val current_time: timestamp = context.last_block_time;
    // val start_timestamp: timestamp = current_time - (current_time % 86400000);
    // val end_timestamp: timestamp = start_timestamp + 86400000 - 1;

    val tasks = task @* { .user == user, .due_date >= day_start, .due_date <= day_end } (
        @sort @omit .due_date,
        task_dto (
            .rowid,
            .title,
            .description,
            .status,
            .due_date,
            user = task.user.to_struct()
        )
    ) offset pointer limit n_tasks;

    val total = task @* { .user == user, .due_date >= day_start, .due_date <= day_end } ( @ sum 1 )[0];

    return (
        total = total,
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}

query get_task(
    user_id: byte_array,
    task_id: integer
): task_dto {
    val user = require_user(user_id);
    val todo = task @ { .rowid == rowid(task_id), .user == user } (
        task_dto (
            .rowid,
            .title,
            .description,
            .status,
            .due_date,
            user = task.user.to_struct()
        )
    );

    return todo;
}

query get_task_by_status(
    user_id: byte_array,
    status_front: text,
    pointer: integer,
    n_tasks: integer
): (total: integer, pointer: integer, tasks: list<task_dto>) {

    val user = require_user(user_id);

    if (status_front == "PENDING") {
        print("I am here flag it out ");
        val tasks = task @* { task.user == user, .status == status.PENDING } (
            @sort @omit .due_date,
            task_dto (
                .rowid,
                .title,
                .description,
                .status,
                .due_date,
                user = task.user.to_struct()
            )
        ) offset pointer limit n_tasks;

        val total = task @* { .user == user, .status == status.PENDING } ( @ sum 1 )[0];

        return (
            total = total,
            pointer = pointer + tasks.size(),
            tasks = tasks
        );
    } else {
        val tasks = task @* { .user == user, .status == status.COMPLETED } (
            @sort @omit task.due_date,
            task_dto (
                .rowid,
                .title,
                .description,
                .status,
                .due_date,
                user = task.user.to_struct()
            )
        ) offset pointer limit n_tasks;

        val total = task @* { .user == user, .status == status.COMPLETED } ( @ sum 1 )[0];

        return (
            total = total,
            pointer = pointer + tasks.size(),
            tasks = tasks
        );
    }
}

query get_task_upcoming_days(
    user_id: byte_array,
    next_day: integer,
    pointer: integer,
    n_tasks: integer,
): (total: integer, pointer: integer, tasks: list<task_dto>) {
    val user = require_user(user_id);
    val tasks = task @* { .user == user, .due_date >= next_day } (
        @sort @omit .due_date,
        task_dto (
            .rowid,
            .title,
            .description,
            .status,
            .due_date,
            user = .user.to_struct()
        )
    ) offset pointer limit n_tasks;

    val total = task @* { .user == user, .due_date >= next_day } ( @ sum 1 )[0];

    return (
        total = total,
        pointer = pointer + tasks.size(),
        tasks = tasks
    );
}
